pipeline {
    agent { label 'master' }
    environment {
        VAULT_TOKEN = credentials('VAULT_TOKEN')
    }

    stages {
        stage('Preload') {
            steps {
                script {
                    COMMIT_HASH = sh (
                    script: '''#!/bin/bash
                    git show | grep -i -m 1 commit | awk '{print $2}' 
                    ''',
                    returnStdout: true).trim()
                    if (env.BRANCH_NAME.startsWith('PR')) {
                        BRANCH_NAME = "${env.CHANGE_BRANCH}"
                    } else {
                        BRANCH_NAME = "${env.BRANCH_NAME}"
                    }
                }
                echo "Branch name(env): ${env.BRANCH_NAME}"
                echo "Change branch(env): ${env.CHANGE_BRANCH}"
                echo "Change ID: ${env.CHANGE_ID}"
                echo "Branch name: ${BRANCH_NAME}"
                echo "Commit hash: ${COMMIT_HASH}"
            }
        }
        
        stage('Pre-Deployment') {
            steps {
                //retrieve linode pat from vault
                //check for namespace inside k8s cluster matching BRANCH_NAME
                //if namespace BRANCH_NAME exists, grab the COMMIT_HASH of the existing deployment
                //if namespace BRANCH_NAME doesn't exist, create it.
                echo "This is the Pre-Deployment Stage"

                script {
                    
                    sh (
                    script: '''#!/bin/bash
                    vault login -no-store $VAULT_TOKEN 
                    ''')
                    LINODE_PAT = sh (
                    script: '''#!/bin/bash
                    vault lo
                    vault kv get -field=pat kv/linode/ 
                    ''',
                    returnStdout: true).trim()
                }
                echo "Success?: ${LINODE_PAT}"
            }
        }
        
        stage('Deployment') {
            steps {
                //Deploy containers with helm.
                echo "This is the Deployment Stage"
            }
        }
        
        stage('Configuration') {
            steps {
                //Configure containers with Ansible.
                echo "This is the Configuration Stage"
            }
        }
        
        stage('Post-Deployment') {
            steps {
                //apply ingress rule using file
                //delete old deployment matching existing COMMIT_HASH
                echo "This is the Post-Deployment Stage"
            }
        }
    }
}
